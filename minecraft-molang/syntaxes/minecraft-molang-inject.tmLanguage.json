{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Minecraft molang injection",
  "scopeName": "source.bc.minecraft.molang.inject",
  "injectionSelector": "L:string.quoted.double.json",
  "patterns": [
    { "include": "#keywords" },
    { "include": "#operators" },
    { "include": "#selectors" },
    { "include": "#constants" }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        { "name": "entity.name.type", "match": "^@" },
        { "name": "entity.name.type", "match": "query" },
        { "name": "entity.name.type", "match": "variable" },
        { "name": "entity.name.type", "match": "[Mm]ath" },
        { "name": "entity.name.type", "match": "/[a-z]+" },
        { "name": "entity.name.function", "match": "(?<=query\\.)\\w*" },
        { "name": "entity.name.function", "match": "(?<=variable\\.)\\w*" },
        { "name": "entity.name.function", "match": "(?<=[Mm]ath\\.)\\w*" }
      ]
    },
    "operators": {
      "patterns": [
        { "name": "constant.character", "match": "[|!<>=?*;\\/\\-+:&]" },
        { "name": "keyword.operator", "match": "[.,(){}\\[\\]]" }
      ]
    },
    "selectors": {
      "patterns": [
        { "name": "markup.bold", "match": "(@[cvasrep]\\b)" },
        {
          "name": "entity.name.variable",
          "match": "\\b(tag|x|y|z|dx|dy|dz|scores|type|c|m|r|rm|team|l|lm|name|rx|rxm|ry|rym)(?=\\=)"
        },
        { "name": "entity.name.variable", "match": "\\b[a-z0-9]+(?=\\=)" },
        { "name": "string.regexp", "match": "\\b(?<=tag=)[a-zA-Z_\\-0-9]+" },
        { "name": "string.regexp", "match": "\\b(?<=tag=!)[a-zA-Z_\\-0-9]+" },
        { "name": "invalid", "match": "@[cvasrep]\\[.*$" }
      ]
    },
    "constants": {
      "patterns": [
        { "name": "constant.numeric", "match": "\\b-\\d+\\b" },
        { "name": "constant.numeric", "match": "\\b\\d+\\b" },
        { "name": "keyword.control", "match": "(?<==)!" },
        { "name": "keyword.control", "match": "\\.\\." },
        { "name": "constant.character", "match": "\\b[Tt]rue\\b" },
        { "name": "constant.character", "match": "\\b[Ff]alse\\b" },
        { "name": "string.jade", "match": "\\b(?<=function )[a-z0-9/_]+\\b" },
        { "name": "string.quoted.double.minecraft", "match": "'[^']*'" }
      ]
    }
  }
}
