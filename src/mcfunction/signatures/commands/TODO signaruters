this.newItem('locate', 'locate buriedtreasure', 'Display the coordinates for the closest structure of a given type.', [
new ParameterInformation('', '')
]);

this.newItem('locate', 'locate endcity', 'Display the coordinates for the closest structure of a given type.', [
new ParameterInformation('', '')
]);

this.newItem('locate', 'locate fortress', 'Display the coordinates for the closest structure of a given type.', [
new ParameterInformation('', '')
]);

this.newItem('locate', 'locate mansion', 'Display the coordinates for the closest structure of a given type.', [
new ParameterInformation('', '')
]);

this.newItem('locate', 'locate mineshaft', 'Display the coordinates for the closest structure of a given type.', [
new ParameterInformation('', '')
]);

this.newItem('locate', 'locate monument', 'Display the coordinates for the closest structure of a given type.', [
new ParameterInformation('', '')
]);

this.newItem('locate', 'locate ruins', 'Display the coordinates for the closest structure of a given type.', [
new ParameterInformation('', '')
]);

this.newItem('locate', 'locate shipwreck', 'Display the coordinates for the closest structure of a given type.', [
new ParameterInformation('', '')
]);

this.newItem('locate', 'locate stronghold', 'Display the coordinates for the closest structure of a given type.', [
new ParameterInformation('', '')
]);

this.newItem('locate', 'locate temple', 'Display the coordinates for the closest structure of a given type.', [
new ParameterInformation('', '')
]);

this.newItem('locate', 'locate village', 'Display the coordinates for the closest structure of a given type.', [
new ParameterInformation('', '')
]);

this.newItem('locate', 'locate pillageroutpost', 'Display the coordinates for the closest structure of a given type.', [
new ParameterInformation('', '')
]);
		
		
		
this.newItem('mobevent', 'mobevent minecraft:pillager_patrols_event [value: Boolean]', 'Controls what mob events are allowed to run.', [
new ParameterInformation('', '')
]);

this.newItem('mobevent', 'mobevent wandering_trader_event [value: Boolean]', 'Controls what mob events are allowed to run.', [
new ParameterInformation('', '')
]);

this.newItem('mobevent', 'mobevent events_enabled [value: Boolean]', 'Controls what mob events are allowed to run.', [
new ParameterInformation('', '')
]);
		
		
this.newItem('replaceitem', 'replaceitem block <position: x> <position: y> <position: z> slot.container <slotId: int> <itemName: Item> [amount: int] [data: int] [components: json]', 'Replaces items in inventories', [
new ParameterInformation('', '')
]);

this.newItem('replaceitem', 'replaceitem entity <target: target> <slotType: EntityEquipmentSlot> <slotId: int> <itemName: Item> [amount: int] [data: int] [components: json]', 'Replaces items in inventories', [
new ParameterInformation('', '')
]);
		
		
this.newItem('scoreboard', 'scoreboard objectives list', 'Lists all created variables in the scoreboard', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard objectives add <name> dummy [display name: string]', 'Adds a new variable to the scoreboard', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard objectives remove <name>', 'Removes a variable from the scoreboard', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard objectives setdisplay <slot> [objective]', 'Displays the given variable onto the given slot', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard objectives setdisplay belowname [objective]', 'Displays the given variable under the name', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard objectives setdisplay list [objective]', 'Displays the given variable in the players list', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard objectives setdisplay sidebar [objective]', 'Displays the given variable on the right side of the screen', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players list [entity]', 'Display players or the scores of an entity', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players set <entity: string> <objective> <score>', 'Sets the score of an given entity or playername', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players add <entity: string> <objective> <count>', 'Add onto the score of an given entity or playername', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players remove <entity: string> <objective> <count>', 'Substracts the score of an given entity or playername', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players reset <entity: string> [objective]', 'Resets the score(s) of an given entity or playername', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players operation <targetName> <targetObjective> <operation> <selector> <objective>', 'Performs an operation on two or more score carriers', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players operation <targetName> <targetObjective> %= <selector> <objective>', 'Performs the modulus operation, the result is stored in the target', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players operation <targetName> <targetObjective> *= <selector> <objective>', 'Performs the multiply operation, the result is stored in the target', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players operation <targetName> <targetObjective> += <selector> <objective>', 'Performs the addition operation, the result is stored in the target', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players operation <targetName> <targetObjective> -= <selector> <objective>', 'Performs the substraction operation, the result is stored in the target', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players operation <targetName> <targetObjective> /= <selector> <objective>', 'Performs the division operation, the result is stored in the target', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players operation <targetName> <targetObjective> < <selector> <objective>', 'Performs the Lesser than operation, the smallest value is assigned to the target', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players operation <targetName> <targetObjective> = <selector> <objective>', 'Performs the assign operation, can only be done on 2 carriers', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players operation <targetName> <targetObjective> > <selector> <objective>', 'Performs the Greather than operation, the largest value is assigned to the target', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players operation <targetName> <targetObjective> >< <selector> <objective>', 'Performs the swap operation, can only be done on 2 carriers', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players test <entity> <objective> <min|*> <max|*>', 'A test statement to test an entity or playername has the specified value', [
new ParameterInformation('', '')
]);

this.newItem('scoreboard', 'scoreboard players random <entity> <objective> <min> <max>', 'Assigns a random value to the specified entities or playername', [
new ParameterInformation('', '')
]);
		
		
this.newItem('summon', 'summon <entityType: EntityType> [spawnPoint: x] [spawnPoint: y] [spawnPoint: z] [spawnEvent: string] [nameTag: string]', 'Summons an entity.', [
new ParameterInformation('<entityType: EntityType>', ''),
new ParameterInformation('[spawnPoint: x]', ''),
new ParameterInformation('[spawnPoint: y]', ''),
new ParameterInformation('[spawnPoint: z]', ''),
new ParameterInformation('[spawnEvent: string]', ''),
new ParameterInformation('[nameTag: string]', '')
]);

this.newItem('summon', 'summon <entityType: EntityType> <nameTag: string> [spawnPoint: x] [spawnPoint: y] [spawnPoint: z]', 'Summons an entity with a name.', [
new ParameterInformation('', '')
]);
		
		
this.newItem('tag', 'tag <targets> remove <name>', 'Remove tags stored in entities', [
new ParameterInformation('', '')
]);

this.newItem('tag', 'tag <targets> list', 'Lists tags stored in entities', [
new ParameterInformation('', '')
]);

this.newItem('tag', 'tag <targets> add <name>', 'Adds tags stored in entities', [
new ParameterInformation('', '')
]);
		
		
this.newItem('tp', 'tp <target> <x y z|destination> [yRot: value] [xRot: value] [checkForBlocks: Boolean]', 'Teleports entities', [
new ParameterInformation('', '')
]);

this.newItem('tp', 'tp <target> <x y z|target> facing <lookAtEntity: target|x y z> [checkForBlocks: Boolean]', 'Teleports entities', [
new ParameterInformation('', '')
]);

this.newItem('tp', 'tp <x y z|destination> [yRot: value] [xRot: value] [checkForBlocks: Boolean]', 'Teleports entities', [
new ParameterInformation('', '')
]);

this.newItem('tp', 'tp <x y z|target> facing <lookAtEntity: target|x y z> [checkForBlocks: Boolean]', 'Teleports entities', [
new ParameterInformation('', '')
]);

this.newItem('teleport', 'teleport <target> <x y z|destination> [yRot: value] [xRot: value] [checkForBlocks: Boolean]', 'Teleports entities', [
new ParameterInformation('', '')
]);

this.newItem('teleport', 'teleport <target> <x y z|target> facing <lookAtEntity: target|x y z> [checkForBlocks: Boolean]', 'Teleports entities', [
new ParameterInformation('', '')
]);

this.newItem('teleport', 'teleport <x y z|destination> [yRot: value] [xRot: value] [checkForBlocks: Boolean]', 'Teleports entities', [
new ParameterInformation('', '')
]);

this.newItem('teleport', 'teleport <x y z|target> facing <lookAtEntity: target|x y z> [checkForBlocks: Boolean]', 'Teleports entities', [
new ParameterInformation('', '')
]);
		
		
this.newItem('tickingarea', 'tickingarea list [all-dimensions]', 'List ticking areas.', [
new ParameterInformation('', '')
]);

this.newItem('tickingarea', 'tickingarea remove_all', 'remove all ticking areas.', [
new ParameterInformation('', '')
]);

this.newItem('tickingarea', 'tickingarea remove <position: x y z|name: string>', 'remove ticking areas.', [
new ParameterInformation('', '')
]);

this.newItem('tickingarea', 'tickingarea add circle <center: x y z> <radius: int> [name: string]', 'Add ticking areas.', [
new ParameterInformation('', '')
]);

this.newItem('tickingarea', 'tickingarea add <from: x> <from: y> <from: z> <to: x> <to: y> <to: z> [name: string]', 'Add ticking areas.', [
new ParameterInformation('', '')
]);
		
		
this.newItem('time', 'time add <amount: int>', 'Changes or queries the world's game time.', [
new ParameterInformation('', '')
]);

this.newItem('time', 'time set <time: TimeSpec|amount: int>', 'Changes or queries the world's game time.', [
new ParameterInformation('', '')
]);

this.newItem('time', 'time query <daytime|gametime|day>', 'Changes or queries the world's game time.', [
new ParameterInformation('', '')
]);
		
		
		this.newItem('title', 'title <player: target> clear', 'Controls screen titles', [
new ParameterInformation('', '')
]);

this.newItem('title', 'title <player: target> reset', 'Resets the screen title', [
new ParameterInformation('', '')
]);

this.newItem('title', 'title <player: target> <title|subtitle|actionbar> <titleText: message>', 'Controls screen titles', [
new ParameterInformation('', '')
]);

this.newItem('title', 'title <player: target> times <fadeIn: int> <stay: int> <fadeOut: int>', 'Controls screen titles', [
new ParameterInformation('', '')
]);

this.newItem('titleraw', 'titleraw <player: target> clear', 'Controls screen titles with JSON messages.', [
new ParameterInformation('', '')
]);

this.newItem('titleraw', 'titleraw <player: target> reset', 'Controls screen titles with JSON messages.', [
new ParameterInformation('', '')
]);

this.newItem('titleraw', 'titleraw <player: target> <title|subtitle|actionbar> { \"rawtext\": [ { \"text\": \"\" }, \"\", { \"translate\": \"\" } ] }', 'Controls screen titles with JSON messages.', [
new ParameterInformation('', '')
]);

this.newItem('titleraw', 'titleraw <player: target> times <fadeIn: int> <stay: int> <fadeOut: int>', 'Controls screen titles with JSON messages.', [
new ParameterInformation('', '')
]);